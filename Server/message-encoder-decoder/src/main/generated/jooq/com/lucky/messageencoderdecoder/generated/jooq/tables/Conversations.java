/*
 * This file is generated by jOOQ.
 */
package com.lucky.messageencoderdecoder.generated.jooq.tables;


import com.lucky.messageencoderdecoder.generated.jooq.Keys;
import com.lucky.messageencoderdecoder.generated.jooq.MessageEncoderDecoder;
import com.lucky.messageencoderdecoder.generated.jooq.tables.records.ConversationsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conversations extends TableImpl<ConversationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>message-encoder-decoder.conversations</code>
     */
    public static final Conversations CONVERSATIONS = new Conversations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationsRecord> getRecordType() {
        return ConversationsRecord.class;
    }

    /**
     * The column <code>message-encoder-decoder.conversations.id</code>.
     */
    public final TableField<ConversationsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>message-encoder-decoder.conversations.user_id</code>.
     */
    public final TableField<ConversationsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>message-encoder-decoder.conversations.message_id</code>.
     */
    public final TableField<ConversationsRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Conversations(Name alias, Table<ConversationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conversations(Name alias, Table<ConversationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>message-encoder-decoder.conversations</code>
     * table reference
     */
    public Conversations(String alias) {
        this(DSL.name(alias), CONVERSATIONS);
    }

    /**
     * Create an aliased <code>message-encoder-decoder.conversations</code>
     * table reference
     */
    public Conversations(Name alias) {
        this(alias, CONVERSATIONS);
    }

    /**
     * Create a <code>message-encoder-decoder.conversations</code> table
     * reference
     */
    public Conversations() {
        this(DSL.name("conversations"), null);
    }

    public <O extends Record> Conversations(Table<O> child, ForeignKey<O, ConversationsRecord> key) {
        super(child, key, CONVERSATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MessageEncoderDecoder.MESSAGE_ENCODER_DECODER;
    }

    @Override
    public UniqueKey<ConversationsRecord> getPrimaryKey() {
        return Keys.KEY_CONVERSATIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<ConversationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_USER_CONVERSATION, Keys.FK_CONVERSATION_MESSAGE);
    }

    private transient Users _users;
    private transient Messages _messages;

    /**
     * Get the implicit join path to the
     * <code>message-encoder-decoder.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK_USER_CONVERSATION);

        return _users;
    }

    /**
     * Get the implicit join path to the
     * <code>message-encoder-decoder.messages</code> table.
     */
    public Messages messages() {
        if (_messages == null)
            _messages = new Messages(this, Keys.FK_CONVERSATION_MESSAGE);

        return _messages;
    }

    @Override
    public Conversations as(String alias) {
        return new Conversations(DSL.name(alias), this);
    }

    @Override
    public Conversations as(Name alias) {
        return new Conversations(alias, this);
    }

    @Override
    public Conversations as(Table<?> alias) {
        return new Conversations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversations rename(String name) {
        return new Conversations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversations rename(Name name) {
        return new Conversations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversations rename(Table<?> name) {
        return new Conversations(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
